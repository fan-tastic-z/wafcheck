use anyhow::{Context, Result};
use regex::Regex;

use super::Plugin;

#[derive(Debug)]
pub struct CloudFront {
    name: String,
}

impl Plugin for CloudFront {
    fn check(
        &self,
        content: &str,
        _status: reqwest::StatusCode,
        headers: &reqwest::header::HeaderMap,
    ) -> Result<bool> {
        if self.match_content(content)? || self.match_header(headers)? {
            Ok(true)
        } else {
            Ok(false)
        }
    }

    fn name(&self) -> String {
        self.name.clone()
    }
}

impl Default for CloudFront {
    fn default() -> Self {
        Self::new()
    }
}

impl CloudFront {
    pub fn new() -> Self {
        CloudFront {
            name: "Cloudfront (Amazon)".to_string(),
        }
    }

    fn match_content(&self, content: &str) -> Result<bool> {
        let pattern =
            Regex::new(r"Generated by cloudfront").context("cloudfront new regex error")?;
        Ok(pattern.is_match(content))
    }

    pub fn match_header(&self, headers: &reqwest::header::HeaderMap) -> Result<bool> {
        let powecf_iddr_by = headers.get("x-amz-cf-idd");

        if let Some(powecf_iddr_by) = powecf_iddr_by {
            let pattern = Regex::new(r"'.+?'").context("cloudfront new regex error")?;
            let contenet = powecf_iddr_by.to_str()?;
            if pattern.is_match(contenet) {
                return Ok(true);
            }
        }

        let x_cache = headers.get("x-cache");

        if let Some(x_cache) = x_cache {
            let pattern =
                Regex::new(r"Error from cloudfront").context("cloudfront new regex error")?;
            let contenet = x_cache.to_str()?;
            if pattern.is_match(contenet) {
                return Ok(true);
            }
        }
        Ok(false)
    }
}

#[cfg(test)]
mod tests {
    use std::fs;

    use crate::plugins::cloudfront::CloudFront;

    fn get_html_content() -> String {
        fs::read_to_string("tests/html/cloudfront.html").unwrap()
    }

    #[test]
    pub fn test_match_content() {
        let content = get_html_content();
        let waf = CloudFront::new();

        let res = waf.match_content(&content).unwrap();
        assert!(res)
    }
}
